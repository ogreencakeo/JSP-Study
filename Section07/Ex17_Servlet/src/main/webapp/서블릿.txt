● 서블릿(Servlet)이란 무엇인가?
- 서버에서 실행되는 자바 프로그램 -> Server + Applet = Servlet
- 웹 기반의 서버에서(웹서버) HTTP 요청과 응답을 처리하는 과정에서 사용할 수 있는 서버 프로그래밍 방식
- 즉, 서버 프로그매링을 한다라고 생각 -> 뭘로? -> 자바 언어로..
- 그러다보니 기본적으로 특정 클래스를 상속받아서 구현해야 한다.
- 우리가 지금까지 앞에서 공부한 JSP 코드들은 사실 실행되는 과정에서 내부 규칙에 따라 -> 서블릿으로 변환되어 실행

● 공부 순서
- 보통 학원이나 책 집필 순서로 본다면 : 서블릿 -> JSP 순이나 JSP -> 서블릿 순으로 해도 무방
- 취업이나 이직을 준비하는 과정에서는 JSP 학습 후 서블릿에 대한 기본 정도만 공부하고 바로 -> 프레임워크로 넘어가면 됨

● 서블릿 실행 과정
- 사용자 요청(request)이 들어오면 웹서버내 컨테이너에서 서블릿이 동작하고 적절한 응답(response)을 반환
- 이때 응답의 형태는 DB 연동에 따른 결과 데이터를 출력하거나
- 요청에 따른 적절한 연산을 수행한 후 HTML 문서를 출력하는 형태로 응답

● service() 메서드
- 클라이언트 요청이 있으면 서블릿 컨테이너는 자동으로 service() 메서드 -> 자동 호출
- 이 메서드는 요청 방식에 따라 GET이냐, POST냐 요청을 구분하여 -> doGet() 또는 doPost() 메서드 호출
- 각각의 요청을 철저하게 구분해서 만든다면 구분 가능하지만, 보통 통합해서 구현함

● 서블릿 장점
- 순수 자바 언어를 사용하여 웹 서버 프로그래밍을 할 수 있으므로 자바 API 등을 자유롭게 사용
- JVM 기반으로 동작하므로 다양한 OS 지원 및 여러 환경에서 사용 가능
- ASP 같은 경우 MS IIS 서버에서만 동작 가능

● 서블릿 컨테이너
- 쉽게 말해, JSP/Servlet 프로그램을 구동할 수 있는 환경 -> 톰캣
- 흔히 큰 틀에서 톰캣 등을 서버라고 부르기도 하는데 순수 서버하고 컨테이너는 차이가 있음
- 순수 서버만으로는 JSP/Servlet 프로그램을 구동할 수 없고, 요청이 들어오면 이를 실행할 수 있는 컨테이너에게 요청을 전가
- 서블릿 컨테이너 -> JSP/Servlet 구동(실행) 가능, 컨테이너에 따라서는 웹 서버 기능도 탑재
- 컨테이너가 웹 서버 기능을 내장하고 있다고 해도 순서 서버 만큼은 못하므로 전문 서버와 함께 병행해서 사용하는 것을 권장

● 서블릿과 MVC 패턴
- MVC 패턴이란? -> 비즈니스 로직과 뷰 페이지 영역을 분리 -> Model - View - Controller
- MVC 패턴을 쉽게 적용 -> 이 과정에서 뷰 페이지와 비즈니스 로직을 쉽게 분리
- 뷰 페이지 담당(JSP), 컨트롤러 담당(Servlet)
- 분리에 따른 장점 -> 디자이너와 개발자간의 협업 시 업무 영역의 분리로 개발 향상성 기대 -> 유지보수(수정/확장)가 용이

● doGet(), doPost() 메서드
- 사용자 요청 방식에 따른 처리를 하기 위한 주요 메서드
- 내가 구현하는 것
- 서블릿은 자바 클래스 형태이므로 -> java.servlet.HttpServlet 클래스를 상속 받아야만 구현 가능
- 상속 받게되면 HttpServlet 클래스내 여러 기능을 자유롭게 사용

● GET 방식 vs POST 방식
- POST 방식
	1. Form 태그를 사용하여 전송하느 방식 -> 폼을 통한 전송만 가능
	2. 보통 "포스팅" 한다고 했을때 서버로 정보를 보내는 가장 보편적인 방식
	3. 데이터 크기에 제한 X
	4. 상대적으로 보안 ↑
	
- GET 방식
	1. 단어 뜻이 뭔가를 "얻는다"라는 의미 -> 서버한테 정보를 요청해서 서버의 (간단한) 정보를 취합
	2. 간단한 정보를 받는다 생각 했을 때 -> 데이터 전달 크기에 제한 O
	3. 주소 창이나 링크를 통해 서버로 전달
	4. 이 과정에서 URL이 노출 -> 노출된 URL과 LINK에 여러 정보들이 보이므로 보안 ↓